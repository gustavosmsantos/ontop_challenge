* Ontop challenge

This repository contains the solution to the Ontop challenge. It basicaly consist in creating a service which coordinates transactions between two different services: 

- wallets: logical representation of an user funds within the company;
- payments: effectively transfer money from a Ontop account to a customer account.

** Assumptions

- This project assumes that user identity is previously validated;
- It requires a previously created bank account (this creation is out of the scope of the challenge). To enable tests a seed was included with same data from mocked services, considering the "happy path"

** Domain model

- *Transaction*: consists in a transfer operation, which can be of withdraw or refund;
- *Bank Account*: holds information of a user bank account;
- *Company Bank Account*: holds the information of a bank account owned by the company;
- *Payment Info*: information about a payment;
- *Transaction component*: information about how the transaction money is splitted (between the effective amount and fees);
- *Wallet*: information about an user funds amount.

** Project architecture

The project was created considering concepts from clean architecture, domain driven design, plus functional core, imperative shell approaches. 
Therefore, it's divided in some modules which allow to keep inputs and outputs decoupled from the business logic.

The project consists in the following structure:

- *core*: a module tied to the application domain, containing pure business logics plus interfaces to interact with external systems (gateways/repositories). Their implementation is found within specific modules;
- *web_adapter*: the web entrypoint to interact with the system;
- *gateways*: module responsible to implement the project gateways, containing http client implementations;
- *repositories*: responsible for database interaction;
- *root*: the main application which glues core and adapters;

** Transaction states

A transaction lifecycle has this the following state order: PENDING -> PROCESSING -> SUCCEEDED/FAILED

- *PENDING*: a transaction initial state. It just means that the transaction is created, but no other processing has been done yet;
- *PROCESSING*: payment service accepted the request to transfer;
- *SUCCEEDED*: money was successfully transferred;
- *FAILED*: there was a problem processing the transaction payment. A compensational transaction (REFUND) is created to restore the wallet funds.

** Running locally

To run the application locally, execute the bootRun task from the project root:

#+BEGIN_SRC bash
  ./gradlew bootRun
#+END_SRC

 *Note*: in order to work properly, java 17+ is required;

** Next steps

- Handle concurrency scenarios: Since the project controls a finantial balance, it's very important to keep the consistency in mind. The current implementation doesn't have any lock mechanism to prevent two service instances to decrease balance concurrently, which could lead to a scenario where a user is able to execute a transfer without having funds.
- Finish adapter implementation (some mocks still present);
- Increase test coverage, testing specially the adapters;
- Process usecases within a transaction, to avoid entities being persisted in the presence of API issues;
- Properly handle error scenarios (a lot of them are still uncovered);
- Containerize the application, and include a docker-compose to make local tests easier;
